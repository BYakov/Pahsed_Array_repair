
#ifndef _SUL_AVR_H_
#define _SUL_AVR_H_

#ifndef _SUL_BASE_H_
#include "..\base_class\sul_base.h"
#endif
/*
//! Вектор данных передавайемый СУЛ
struct vector {

u8	cmd;				//!< Код команды управления СУЛ
u8 count : 8;			//!< Счетчик циклов обмена
u8  : 7;				//!< Зарезервированно
u8 flag : 1;			//!< Поле флага (всегда 1)

u8  : 3;				//!< Зарезервированно
u8 mode : 3;			//!< Режи работы СУЛ
u8	: 2;				//!< Зарезервированно
u8  : 8;				//!< Зарезервированно	
u16 dX;					//!< Координата отклонения луча по Х
u16 dY;					//!< Координата отклонения луча по Y
u8  : 8;				//!< Зарезервированно
u8 wide : 1;			//!< Тип луча (широкий)
u8  : 3;				//!< Зарезервированно
u8 narrow : 1;			//!< Тип луча (узкий)
u8 zone : 3;			//!< Номер рабочей зоны
};
*/
#pragma pack(1)
//! Вектор данных передавайемый СУЛ
struct ctrl_vector {

	u8	cmd;				//!< Код команды управления СУЛ
	u16	count;				//!< Код команды управления СУЛ
	u16 mode;				//!< Режи работы СУЛ
	u16 dX;					//!< Координата отклонения луча по Х
	u16 dY;					//!< Координата отклонения луча по Y
	u16 zone;				//!< Номер рабочей зоны
};

//! Коды команд для управления модулем МОЛКБ в СУЛ АВР.
enum sul_command {

	CMD_RECIEVE_VECTOR		= 0x01, //!< Приянть управляющий вектор
	CMD_TEST_EXCHANGE		= 0x07, //!< Проверка обмена с модулем МОЛКБ
	CMD_FLASH_CLEAR			= 0x10, //!< Очистить FLASH в МОЛКБ
	CMD_BLOCK_LOADED		= 0x11, //!< Приянть управляющий вектор
	CMD_INIT_MODULES		= 0x12, //!< Проинициализировать модули МОУФ
	CMD_CTRL_FLASH			= 0x13, //!< Передать контрольную сумму данных из FLASH
	CMD_CTRL_CALC			= 0x14, //!< Проконтролировать вычислители модулей МОУФ
	CMD_CTRL_CHAN			= 0x15, //!< Проконтролировать каналы
	CMD_CTRL_POWER_OFF		= 0x16, //!< Отключить питание модулей МОУФ
	CMD_CTRL_POWER_ON		= 0x17, //!< Включить питание модулей МОУФ
	CMD_CTRL_SUPPLY			= 0x18, //!< Проконтролировать напряжение питания модулей МОУФ
	CMD_RETURN_DATA16		= 0x20, //!< Вернуть 16 байт данных
	CMD_RETURN_DATA128_0            = 0x21, //!< Вернуть 128 байт данных (первая часть)
	CMD_RETURN_DATA128_1	        = 0x22, //!< Вернуть 128 байт данных (вторая часть)
	CMD_RETURN_DATA32		= 0x23, //!< Вернуть 32 байта данных
	CMD_PREPARE_INFO		= 0x24, //!< Подготовить информацию о состоянии МОЛКБ

	CMD_SET_RAM_DATA		= 0x25, //!< Принять массив F0 в память RAM
	CMD_GET_RAM_DATA		= 0x26, //!< Передать массив F0 из памяти RAM
	CMD_SET_CHANNEL		        = 0x27, //!< Передать информацию F0 для канала
	CMD_GET_CHANNEL		        = 0x28, //!< Передать информацию F0 для канала
	CMD_GET_RAM_CRC		        = 0x29, //!< Передать CRC RAM

	CMD_CLEAR_EEPROM_DATA	        = 0x30, //!< Очистить память EEPROM
	CMD_RESERVED			= 0x31, //!< Зарезервированный код команды
	CMD_SET_DEVICE_INFO		= 0x32, //!< Принять информацию о состоянии МОЛКБ
	CMD_GET_DEVICE_INFO		= 0x33, //!< Передать информацию о состоянии МОЛКБ

	CMD_INIT_MODULES_RAM            = 0x40, //!< Проинициализировать модули данными из RAM

	CMD_M0LKB_READY			= 0x55, //!< Выдать информацию о готовности МОЛКБ
	CMD_M0LKB_REQUEST		= 0xAA, //!< Выдать команду запроса
	CMD_EMPTY_COMMAND		= 0x0,  //!< Пустая команда (для инициализации)

};

//! Управляющий заголовок передавайемый СУЛ
/*!
Заголовок передаваемый СУЛ для обеспечения
независимости передачи информации от аппаратуы со стороны HOST.
*/
struct sul_message {

	u8				cmd;		//!< Код команды управления СУЛ
	u8				data[128];	//!< Массив с данными для текущей команды

	//! Конструктор по умолчанию
	sul_message()
	{
		cmd = CMD_EMPTY_COMMAND;
	}
};

#pragma pack()
///////////////////////////////////////////////////////////////////////////////

//!  Класс реализует интерфейс к СУЛ АВР.
/*!
Отвечает за взаимодействие с СУЛ АВР. Реализует все интерфейсные функции,
определенные в классе sul_base.
*/
class sul_avr : public sul_base
{

private:
	//! Счетчик сеансов обмена
	u8 count;

	//! Конструктор по умолчанию
	sul_avr();

	//! Передает блок данных FLASH из конфигурационного пространства в СУЛ
	/*!
	\param zone - номер зоны (начиная с нуля) из которой будет передан блок.
	\param block - номер блока (начиная с нуля) относительно начала зоны.
	*/
	int send_flash_block(int zone, int block);

	//! Передает блок данных RAM из конфигурационного пространства в СУЛ
	/*!
	\param zone - номер зоны (начиная с нуля) из которой будет передан блок.
	\param block - номер блока (начиная с нуля) относительно начала зоны.
	*/
	int send_ram_block(int zone, int block);

	//! Передает командное слово СУЛ для выбора задачи
	/*!
	\param cmd - код команды.
	\param timeout - таймаут операции
	*/
	int send_cmd(sul_command cmd, int timeout);

	//! Выполняет квитирование принятого СУЛ блока данных
	/*!
	\param size - количество переданных байт (включая сообщение).
	\param timeout - таймаут ожидания (зависит от переданной команды).
	*/
	int checkback(int size, int timeout);

	//! Выполняет квитирование выполненной СУЛ команды
	/*!
	\param cmd код переданной ранее команды.
	\param timeout - таймаут ожидания (зависит от переданной команды).
	*/
	int checkback(sul_command cmd, int timeout);

public:
	//! Конструктор класса СУЛ АВР
	/*!
	\param hw - устройство для обмена с СУЛ АВР
	\param sul_config - имя файла конфигурации СУЛ
	\param ram_config - имя файла конфигурации RAM
	*/
	sul_avr( device *hw,
		const char *sul_config,
		const char *ram_config );

	//! Деструктор
	virtual ~sul_avr();
	//------------------------------------------------------------------------------
	//------------------------------------------------------------------------------
	int sul_init(int devn=0);
	int sul_reset(int devn=0);
	int sul_channels(int devn=0);
	int sul_test(int devn=0);
	int sul_test(int devn, unsigned char *buffer, int size);
	int sul_beam_position(u16 x=0, u16 y=0, u8 zone=0, ray_type type=RAY_NARROW);
	struct sul_state sul_state(int devn=0);
	//------------------------------------------------------------------------------
	//------------------------------------------------------------------------------
        virtual int sul_flash_load(const char *file = NULL, int devn = 0);
	virtual int sul_flash_save(const char *file = NULL);
	virtual int sul_flash_erase(int devn = 0);
	virtual u16 sul_flash_crc(int devn = 0);
	//------------------------------------------------------------------------------
	//------------------------------------------------------------------------------
        virtual int sul_ram_load(const char *file = NULL, int devn = 0);
	virtual int sul_ram_save(const char *file = NULL);
	virtual int sul_ram_erase(int devn = 0);
	virtual u16 sul_ram_crc(int devn = 0);
	//------------------------------------------------------------------------------
	//------------------------------------------------------------------------------
};

/////////////////////////////////////////////////////////////////////


#endif //_SUL_AVR_H_
