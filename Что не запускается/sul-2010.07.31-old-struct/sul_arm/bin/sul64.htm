<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\bin\sul64.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\bin\sul64.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Sat Jul 24 18:35:01 2010
<BR><P>
<H3>Maximum Stack Usage =         96 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; init_board &rArr; ConfigureUsart &rArr; IRQ_ConfigureIT
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">resetHandler</a> from board_cstartup_keil.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[3]">NMI_Handler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[4]">HardFault_Handler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[5]">MemManage_Handler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[6]">BusFault_Handler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[7]">UsageFault_Handler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[8]">SVC_Handler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[9]">DebugMon_Handler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[a]">PendSV_Handler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[b]">SysTick_Handler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[c]">SUPC_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[d]">RSTC_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[e]">RTC_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[f]">RTT_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[10]">WDT_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[11]">PMC_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[12]">EFC0_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[13]">EFC1_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[14]">DBGU_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[15]">HSMC4_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[16]">PIOA_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[17]">PIOB_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[18]">PIOC_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[19]">USART0_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[1a]">USART1_IrqTokenHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[1b]">USART2_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[1c]">USART3_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[1d]">MCI0_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[1e]">TWI0_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[1f]">TWI1_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[20]">SPI0_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[21]">SSC0_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[22]">TC0_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[23]">TC1_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[24]">TC2_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[25]">PWM_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[26]">ADCC0_IrqHandler</a> from main.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[27]">ADCC1_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[28]">HDMA_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[29]">UDPD_IrqHandler</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[2a]">IrqHandlerNotUsed</a> from exceptions.o(.text) referenced from board_cstartup_keil.o(vectors)
 <LI><a href="#[1a]">USART1_IrqTokenHandler</a> from exceptions.o(.text) referenced from exceptions.o(.text)
 <LI><a href="#[2b]">USART1_IrqDataHandler</a> from exceptions.o(.text) referenced from exceptions.o(.text)
 <LI><a href="#[2a]">IrqHandlerNotUsed</a> from exceptions.o(.text) referenced from nvic.o(.text)
 <LI><a href="#[22]">TC0_IrqHandler</a> from exceptions.o(.text) referenced from main.o(.text)
 <LI><a href="#[1a]">USART1_IrqTokenHandler</a> from exceptions.o(.text) referenced from main.o(.text)
 <LI><a href="#[26]">ADCC0_IrqHandler</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetHandler
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[31]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[32]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[33]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[80]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[81]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[82]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[83]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[84]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[85]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[86]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[87]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[88]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[89]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[90]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[91]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[92]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[3a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[93]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[94]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[95]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[97]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[98]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[30]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[99]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[35]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[9b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[36]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; init_board &rArr; ConfigureUsart &rArr; IRQ_ConfigureIT
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[39]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[9d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2c]"></a>resetHandler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, board_cstartup_keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = resetHandler &rArr; LowLevelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowLevelInit
</UL>

<P><STRONG><a name="[2e]"></a>GetExceptionTable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_cstartup_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
</UL>

<P><STRONG><a name="[3e]"></a>SetDefaultMaster</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, board_lowlevel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowLevelInit
</UL>

<P><STRONG><a name="[3d]"></a>LowLevelInit</STRONG> (Thumb, 238 bytes, Stack size 4 bytes, board_lowlevel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LowLevelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetHandler
</UL>

<P><STRONG><a name="[9e]"></a>SetFlashWaitState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, board_lowlevel.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>IrqHandlerNotUsed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IrqHandlerNotUsed &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> board_cstartup_keil.o(vectors)
<LI> nvic.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NMI_Handler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HardFault_Handler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MemManage_Handler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BusFault_Handler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UsageFault_Handler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SVC_Handler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DebugMon_Handler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PendSV_Handler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[40]"></a>SYS_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>

<P><STRONG><a name="[c]"></a>SUPC_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SUPC_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[d]"></a>RSTC_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RSTC_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[f]"></a>RTT_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTT_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[10]"></a>WDT_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WDT_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[11]"></a>PMC_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PMC_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[12]"></a>EFC0_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EFC0_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[13]"></a>EFC1_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EFC1_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[14]"></a>DBGU_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DBGU_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[15]"></a>HSMC4_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HSMC4_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[16]"></a>PIOA_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PIOA_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[17]"></a>PIOB_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PIOB_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[18]"></a>PIOC_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PIOC_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[19]"></a>USART0_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART0_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[72]"></a>wait_usart_irq_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>set_usart_irq_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqDataHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqTokenHandler
</UL>

<P><STRONG><a name="[75]"></a>reset_usart_irq_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>USART1_IrqDataHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IrqDataHandler &rArr; IRQ_ConfigureIT
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dma_transactions
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadBuffer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearDataBuffer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableIT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_usart_irq_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exceptions.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>USART1_IrqTokenHandler</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IrqTokenHandler &rArr; IRQ_ConfigureIT
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dma_token
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadBuffer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearDataBuffer
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableIT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_usart_irq_flag
</UL>
<BR>[Address Reference Count : 3]<UL><LI> exceptions.o(.text)
<LI> board_cstartup_keil.o(vectors)
<LI> main.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>USART2_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART2_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[1c]"></a>USART3_IrqHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[1d]"></a>MCI0_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MCI0_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[1e]"></a>TWI0_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TWI0_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[1f]"></a>TWI1_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TWI1_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[20]"></a>SPI0_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI0_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[21]"></a>SSC0_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SSC0_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[22]"></a>TC0_IrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TC0_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_all_toggle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> board_cstartup_keil.o(vectors)
<LI> main.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TC1_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TC1_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[24]"></a>TC2_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TC2_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[25]"></a>PWM_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWM_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[27]"></a>ADCC1_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCC1_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[28]"></a>HDMA_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HDMA_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[29]"></a>UDPD_IrqHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UDPD_IrqHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_cstartup_keil.o(vectors)
</UL>
<P><STRONG><a name="[69]"></a>USART_Configure</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUsart
</UL>

<P><STRONG><a name="[6a]"></a>USART_SetTransmitterEnabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUsart
</UL>

<P><STRONG><a name="[6b]"></a>USART_SetReceiverEnabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUsart
</UL>

<P><STRONG><a name="[9f]"></a>USART_ResetReceiver</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>USART_Write</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>USART_WriteBuffer</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>USART_Read</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearDataBuffer
</UL>

<P><STRONG><a name="[41]"></a>USART_ReadBuffer</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqDataHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqTokenHandler
</UL>

<P><STRONG><a name="[4a]"></a>USART_IsDataAvailable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearDataBuffer
</UL>

<P><STRONG><a name="[45]"></a>USART_ClearDataBuffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearDataBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IsDataAvailable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqDataHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqTokenHandler
</UL>

<P><STRONG><a name="[a1]"></a>USART_PutChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>USART_IsRxReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>USART_GetChar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>IRQ_ConfigureIT</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IRQ_ConfigureIT
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExceptionTable
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUsart
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTc
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqDataHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqTokenHandler
</UL>

<P><STRONG><a name="[43]"></a>IRQ_EnableIT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ_EnableIT
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUsart
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTc
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqDataHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqTokenHandler
</UL>

<P><STRONG><a name="[4d]"></a>IRQ_DisableIT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[a4]"></a>NVIC_SetPending</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>NVIC_ClrPending</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nvic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[a5]"></a>NVIC_Swi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>PIO_Configure</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PIO_Configure &rArr; PIO_SetPeripheralA
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetOutput
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetInput
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetFilter
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralB
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_SetPeripheralA
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
</UL>

<P><STRONG><a name="[a6]"></a>PIO_Set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pio.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>PIO_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pio.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>PIO_Get</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pio.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>PIO_GetOutputDataStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pio.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>PMC_DisableProcessorClock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_CPUInIdleMode
</UL>

<P><STRONG><a name="[6d]"></a>PMC_EnablePeripheral</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
</UL>

<P><STRONG><a name="[aa]"></a>PMC_DisablePeripheral</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pmc.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>PMC_EnableAllPeripherals</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pmc.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>PMC_DisableAllPeripherals</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pmc.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>PMC_IsAllPeriphEnabled</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pmc.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>PMC_IsPeriphEnabled</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pmc.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>PMC_CPUInIdleMode</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, pmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_DisableProcessorClock
</UL>

<P><STRONG><a name="[6e]"></a>LED_Configure</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
</UL>

<P><STRONG><a name="[57]"></a>LED_toggle_red</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>

<P><STRONG><a name="[58]"></a>LED_toggle_green</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>

<P><STRONG><a name="[af]"></a>LED_green_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>LED_red_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>LED_green_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>LED_red_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>LED_all_toggle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC0_IrqHandler
</UL>

<P><STRONG><a name="[3f]"></a>LED_toggle</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle_green
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle_red
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_IrqHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IrqHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IrqHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqTokenHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IrqHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPD_IrqHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI1_IrqHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWI0_IrqHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC2_IrqHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC1_IrqHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUPC_IrqHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSC0_IrqHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IrqHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTT_IrqHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IrqHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTC_IrqHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IrqHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_IrqHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOC_IrqHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOB_IrqHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIOA_IrqHandler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI0_IrqHandler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSMC4_IrqHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMA_IrqHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC1_IrqHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC0_IrqHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_IrqHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCC1_IrqHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqHandlerNotUsed
</UL>

<P><STRONG><a name="[5f]"></a>TC_Configure</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTc
</UL>

<P><STRONG><a name="[60]"></a>TC_Start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTc
</UL>

<P><STRONG><a name="[b3]"></a>TC_Stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tc.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>TC_FindMckDivisor</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, tc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTc
</UL>

<P><STRONG><a name="[5d]"></a>token_crc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = token_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma_token
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dma_transactions
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dma_token
</UL>

<P><STRONG><a name="[5c]"></a>data_crc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma_token
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dma_transactions
</UL>

<P><STRONG><a name="[5b]"></a>init_dma_token</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, exchange.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_crc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_crc
</UL>

<P><STRONG><a name="[47]"></a>check_dma_token</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_dma_token &rArr; token_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqTokenHandler
</UL>

<P><STRONG><a name="[44]"></a>check_dma_transactions</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_dma_transactions &rArr; data_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_crc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IrqDataHandler
</UL>

<P><STRONG><a name="[5e]"></a>ConfigureTc</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FindMckDivisor
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Start
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Configure
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableIT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
</UL>

<P><STRONG><a name="[61]"></a>ADC12_Start</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC12_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_StartConversion
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_GetConvertedData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_EnableIt
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>memcpy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>ADCC0_IrqHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADCC0_IrqHandler &rArr; ADC12_IsChannelInterruptStatusSet
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_IsChannelInterruptStatusSet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_GetStatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_DisableIt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> board_cstartup_keil.o(vectors)
<LI> main.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>ConfigureUsart</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ConfigureUsart &rArr; IRQ_ConfigureIT
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetReceiverEnabled
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetTransmitterEnabled
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configure
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableIT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
</UL>

<P><STRONG><a name="[6c]"></a>init_board</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = init_board &rArr; ConfigureUsart &rArr; IRQ_ConfigureIT
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_Initialize
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_EnableChannel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUsart
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configure
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_EnablePeripheral
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadBuffer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_EnableIT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>memset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>main</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main &rArr; init_board &rArr; ConfigureUsart &rArr; IRQ_ConfigureIT
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_Start
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBuffer
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_all_toggle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_usart_irq_flag
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_usart_irq_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b4]"></a>ADC12_Samples</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>ADC12_Tune</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>ConvHex2mV</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>ADC12_CfgModeReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_Initialize
</UL>

<P><STRONG><a name="[76]"></a>ADC12_SoftReset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_Initialize
</UL>

<P><STRONG><a name="[6f]"></a>ADC12_Initialize</STRONG> (Thumb, 146 bytes, Stack size 52 bytes, adc12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC12_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_SoftReset
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_CfgModeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
</UL>

<P><STRONG><a name="[64]"></a>ADC12_GetConvertedData</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, adc12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_Start
</UL>

<P><STRONG><a name="[79]"></a>ADC12_GetInterruptMaskStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc12.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_IsInterruptMasked
</UL>

<P><STRONG><a name="[78]"></a>ADC12_IsInterruptMasked</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, adc12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_GetInterruptMaskStatus
</UL>

<P><STRONG><a name="[65]"></a>ADC12_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_IsStatusSet
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCC0_IrqHandler
</UL>

<P><STRONG><a name="[7a]"></a>ADC12_IsStatusSet</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, adc12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_GetStatus
</UL>

<P><STRONG><a name="[66]"></a>ADC12_IsChannelInterruptStatusSet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC12_IsChannelInterruptStatusSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCC0_IrqHandler
</UL>

<P><STRONG><a name="[b7]"></a>ADC12_GetModeReg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc12.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>ADC12_StartConversion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_Start
</UL>

<P><STRONG><a name="[70]"></a>ADC12_EnableChannel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
</UL>

<P><STRONG><a name="[b8]"></a>ADC12_DisableChannel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc12.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>ADC12_EnableIt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_Start
</UL>

<P><STRONG><a name="[67]"></a>ADC12_DisableIt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCC0_IrqHandler
</UL>

<P><STRONG><a name="[b9]"></a>ADC12_EnableDataReadyIt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc12.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>ADC12_GetChannelStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc12.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>ADC12_GetLastConvertedData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc12.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>ADC12_CfgAnalogCtrlReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc12.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>ADC12_CfgExtModeReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc12.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>ADC12_GetAnalogCtrlReg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc12.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FindMckDivisor
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__rt_fp_status_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[3c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[34]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c4]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4b]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_DisableIT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
</UL>

<P><STRONG><a name="[4c]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClrPending
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ConfigureIT
</UL>

<P><STRONG><a name="[50]"></a>PIO_SetPeripheralA</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIO_SetPeripheralA
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[51]"></a>PIO_SetPeripheralB</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIO_SetPeripheralB
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[53]"></a>PIO_SetFilter</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[52]"></a>PIO_SetInput</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>

<P><STRONG><a name="[54]"></a>PIO_SetOutput</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIO_SetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIO_Configure
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
