
#ifndef _SUL_CONFIG_H_
#define _SUL_CONFIG_H_

#ifndef _MESSAGE_H_
#include "message.h"
#endif

//------------------------------------------------------------------------------

//! Тип заполнения конфигурационного пространства
enum space_fill_type {
        FILL_RANDOM,            //!< Заполнить с.в. по равномерному закону
        FILL_PATTERN,           //!< Заполнить указанным значением
};

//------------------------------------------------------------------------------

typedef unsigned char	u8;
typedef unsigned short	u16;
typedef unsigned long	u32;

//------------------------------------------------------------------------------

//! Информация о структуре файла конфигурации СУЛ
/*!

Начало нового сегмента данных (зоны) обозначается квадратными скобками [...]
Блоки данных внутри сегмента, для каждого из абонентов, отделяются
друг от друга пустой строкой. Байты внутри блока отделяются друг
от друга пробелами. Номер блока данных определяет номер абонента для которого этот
блок данных предназначен. Адрес абонента определяется физическим интерфейсом
передачи данных и не зависит от его номера. В классах реализующих интерфейс, по
номеру блока данных можно определить адрес абонента.

Файл конфигурации имеет следующую структуру:

;               - комментарий

[ZONE 0]        - признак новой зоны данных (корректур, координат и т. д.)

0..x байт     - блок данных для абонента 0

0..x байт     - блок данных для абонента 1

0..x байт     - блок данных для абонента 2

...

0..x байт     - блок данных для абонента N-1

[ZONE 1]

[ZONE 2]

[ZONE 3]

...

[ZONE M-1]
*/
struct space_info {

        int		zones;			//!< Количество зон в файле конфигурации
        int		zone_size;		//!< Размер зоны (в байтах)
        int		blocks;			//!< Количество заполненных блоков с данными в файле конфигурации
        int		block_size;		//!< Размер блока с данными в файле конфигурации (в байтах)
        int		channels;		//!< Реальное количесвто каналов обслуживаемое одним абонентом
        int		total_size;		//!< Общий размер конфигурационного пространства СУЛ (в байтах)
        int		total_blocks;	        //!< Общее количество блоков в конфигурационном пространстве СУЛ
        int		blocks_in_zone;	        //!< Количество блоков в одной зоне (совпадает с количеством абонентов)

        unsigned short  checksum;		//!< Контрольная сумма всех данных пространства
};

//------------------------------------------------------------------------------

//! Класс пространства конфигурации СУЛ.
/*!
Класс отвечает за работу с файлами конфигурации СУЛ. (RAM, FLASH, EEPROM и др.)
По файлу конфигурации происходит построение конфигурационного пространства СУЛ.
Все необходимые данные для построения пространства опрделяются
автоматически в функции space_detect_params(). На файл конфигурации накладываются
определенные ограничения:

- блоки с данными разделены друг от друга пустой строкой/строками;
- данные в блоке разделены пробелами;
- ; комментарий
- [ обозначение начала нового сегмента (зоны)

\sa space_detect_params()
*/
class space
{

private:

        //! Конструктор по умолчанию
        space();

        char		        *file_name;		//!< Имя файла конфигурации
        unsigned char  	        *space_data;		//!< Конфигурационное пространство СУЛ
        unsigned char  	        *user_block;	        //!< Содержит данные конфигурационного блока
        bool                     configured;            //!< Флаг конфигурации

        //! Функция автоопрделения параметров файла конфигурации
        /*!
        Функция читает файл конфигурации и эмпирически определяет значения
        следующих членов класса:
        - zones;
        - zone_size;
        - blocks;
        - block_size;
        - total_size;
        - total_blocks;
        - blocks_in_zone
        */
        int space_autodetect_params(int modules = 0, int channels = 0);

        //! Создает конфигурационное пространство СУЛ
        /*!
        Создает конфигурационное пространство СУЛ на базе
        информации из структуры cfg_info, которая заполняется
        функцией space_detect_params().
        \sa int space_detect_params(void);
        \sa space_info;
        */
        int space_create_memory(int modules = 0, int channels = 0);

        //! Заполняет созданное конфигурационное пространство СУЛ
        /*!
        \sa int space_create_memory(void);
        */
        int space_fill_memory();

        //! Заполнит нулями блоки данных для указанной зоны конфигурационного пространства СУЛ
        /*!
        \param zone - номер зоны (начиная с нуля).
        */
        int space_clear_zone(int zone);

protected:

        message                 log;		//!< Вывод сообщений
        struct space_info       info;		//!< Содержит необходимую информацию о файле конфигурации

        //! Конструктор класса конфигурации СУЛ
        /*!
        \param config - имя файла конфигурации СУЛ.
        */
        space(const char *config, int modules, int channels);

        //! Деструктор класса конфигурации СУЛ
        virtual ~space();

        //! Проверка флага конфигурации СУЛ
        bool space_configured(){ return configured; }

        //! Провести реконфигурацию пространства с данными.
        /*!
        Функция удаляет старое пространство, создает
        и заполняет новое конфигурационное пространство
        на основе файла config.
        \param config - имя нового файла конфигурации
        */
        int space_reconfig_memory(const char *config);

        //! Записать конфигурационное пространство СУЛ в файл.
        /*!
        Функция записывает конфигурационное пространство СУЛ
        в заданный конфигурационный файл.
        \param config - имя нового файла конфигурации СУЛ
        */
        int space_save_memory(const char *config = NULL);

        //! Возвращает контрольную сумму конфигурационного пространства для абонента
        /*!
        \param devn - номер абонента для которого необходимо посчитать
        контрольную сумму. devn - численно равен порядковому номеру блока данных.
        Если devn = 0 - то возвращается контрольная сумма всего пространства.
        */
        unsigned short space_data_crc(int devn = 0);

        //! Получить блок данных из конфигурационного пространства СУЛ
        /*!
        \param zone - номер сегмента (начиная с нуля) из которого вывести блок .
        \param block - номер блока относительно номера сегмента.
        */
        const unsigned char* space_data_block(int zone,int block);

        //! Возвращает информацию о конфигурационном пространстве СУЛ.
        const struct space_info& space_info(void) {return info;}

        //! Возвращает имя конфигурационного файла СУЛ.
        const char *space_config_file() {return file_name;}

        //! Устанавливает значение элемента в конфигурационном пространстве.
        /*!
        \param zone - номер сегмента (начиная с нуля)
        \param block - номер блока относительно сегмента
        \param offset - смещение в блоке
        \param data - элемент данных
        */
        int space_set_element(int zone, int block, int offset, u8& data);

        //! Возвращает значение элемента в конфигурационном пространстве.
        /*!
        \param zone - номер сегмента (начиная с нуля)
        \param block - номер блока относительно сегмента
        \param offset - смещение в блоке
        \param data - элемент данных
        */
        int space_get_element(int zone, int block, int offset, u8& data);

        //! Заполняет тестовыми данными указанный блок пространства.
        /*!
        \param zone - номер сегмента (начиная с нуля)
        \param block - номер блока, относительно начала сегмента
        \param type - тип заполнения
        \param pattern - шаблон для заполнения
        */
        int space_fill(int zone, int block, space_fill_type type, u8 pattern);
};

//------------------------------------------------------------------------------

#endif //_SUL_CONFIG_H_
